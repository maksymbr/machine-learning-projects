#=============================================================================#
# Parameter file for configuring NeuralNetwork 
#=============================================================================#
# Type of task to address
type:           'Regression' #['Classification', 'Regression']
# Path to data
dataPath:       'data/credit_data.xls'
# Output Path - where to save all the files (phg's etc.)
outputPath:     'output/'
# Specify the seed
RandomSeed:     1
# Choose number of layers (can be any number)
nHiddenLayers:  0 # type 0 to run Logistic Regression
# Activation functions for hidden and output layers
# (['sigmoid', 'tanh', 'relu', 'softmax'])
hiddenFunc:     'sigmoid' #'sigmoid'
outputFunc:     'softmax'
# Number of Neurons for hidden and output layers
nHiddenNeurons: 50
nOutputNeurons: 2 # for binary classification tasks it is 1 or 2
# Epochs to train the algorithm
epochs:         1
# Optimization Algorithm: choose it wisely :)
Optimization:   'GD' #['GD', 'MBGD', 'All']
# Batch size for Gradient Descent => if 0, will use simple gradient descent
BatchSize:      0 #10000
# Learning rate
alpha:          0.1 #np.logspace(-5, 1, 7)
# Regularisation
lambda:         0.0001 # np.logspace(-5, 1, 7) # if 0 then no regularisation used
#=============================================================================#
# I am going to use Franke function, that is why this part of the parameters 
# configuring the franke data. In theory it it possible to use variable dataPath 
# and work with the real data set but again some cleaning and data processing 
# would be required in that step. I think this can be ommit for Franke data, 
# because we know more or less its shape :)
#
# Please, bear in mind that, you still need to specify the type of analysis
# and also all other necessary parameters.
function:       'Franke'
# number of independent variables
nVars:          2
# polynomial degree to approximate
degree:         5
# number of grid points (e.g. if 100, we get grid 100x100)
nPoints:        100
# noise level, aka sigma/psilon/whatever
noise:          0.1
# number of processors to use - useless parameter
nProc:          'mp.cpu_count()-1'



